name: Deploy Production

on:
  push:
    tags:
      - v*.*.*

permissions:
  id-token: write
  contents: read

jobs:
  build_push:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image_digest: ${{ steps.build_and_push.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ vars.ECR_REPOSITORY }}:${{ github.ref_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ECR_REGISTRY }}

      - name: Build and Push Docker Image
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: .
#          Only building for AMD64 for now
#          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ github.ref_name }}

      - name: Push Image Digest to SSM
        run: |
          aws ssm put-parameter \
            --name "/apps/sample-django-app/production/image_digest" \
            --type "String" \
            --value "$digest" \
            --overwrite
        env:
          digest: ${{ steps.build_and_push.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [build_push]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Get Currently Running Task Definition
        id: get-current-task-definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ vars.FAMILY }} \
            --query taskDefinition > task-definition.json

      - name: Update Image Tag
        id: update-api-image-tag
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app
          image: ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ needs.build_push.outputs.image_digest }}

      - name: Display Rendered Template
        id: display-rendered-template
        run: cat ${{ steps.update-api-image-tag.outputs.task-definition }} | jq -r

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-api-image-tag.outputs.task-definition }}
          service: ${{ vars.FAMILY }}
          cluster: ${{ vars.CLUSTER }}
          force-new-deployment: true
          wait-for-service-stability: true
